input = <<-EOF
[[[[3,0],[0,0]],1],4]
[[[[3,4],0],[7,7]],[1,6]]
[[[[2,0],5],7],[[[3,1],[2,6]],[[0,8],6]]]
[[[[5,5],0],1],[[[0,0],1],[[0,6],[0,9]]]]
[[0,[0,[1,7]]],[3,[1,[7,6]]]]
[[[9,[5,2]],[[5,2],[6,8]]],[[[7,0],7],[[2,3],[9,4]]]]
[[[[3,8],7],[[0,7],[2,0]]],[0,[[2,9],0]]]
[[[7,[2,2]],[3,4]],[6,7]]
[8,[[[3,3],8],[[7,1],[6,7]]]]
[[9,[9,8]],[[1,[9,1]],[2,5]]]
[[[7,8],[[1,2],[2,6]]],[[9,7],[6,[7,0]]]]
[[[3,3],[[5,6],5]],[[[2,8],1],9]]
[[[2,[5,0]],[[9,9],[4,0]]],[0,5]]
[[[9,3],[[9,4],[5,8]]],[[[3,2],[7,1]],[[3,8],1]]]
[[3,2],[[6,[0,9]],[8,3]]]
[[[5,7],[[7,4],[4,6]]],[[[9,8],3],3]]
[[[4,[2,8]],9],[[[8,5],[9,7]],[[8,9],[2,6]]]]
[[[1,[2,4]],6],[[8,[5,2]],[[0,7],[4,1]]]]
[[[[4,3],6],[[6,4],[4,2]]],[[9,0],[[5,9],9]]]
[[[[3,0],6],[4,[7,5]]],4]
[[[[1,0],[7,1]],0],[[[8,5],8],2]]
[[[[2,9],[4,1]],[[8,9],[3,3]]],[9,[[0,7],2]]]
[[1,[4,[4,2]]],[[[3,5],[8,8]],2]]
[[[8,[1,4]],[[6,5],5]],[[7,[4,7]],4]]
[[[[0,5],2],[[9,2],0]],0]
[[[[6,2],[2,4]],[0,[7,3]]],[9,[8,[5,9]]]]
[[8,0],2]
[[[[0,2],2],[[9,2],[8,1]]],[[[7,6],[5,3]],6]]
[[[[8,7],[5,3]],[[3,0],8]],[[[8,4],[2,2]],[[8,1],2]]]
[[[[1,5],[4,6]],[[4,0],[2,4]]],[[1,1],[[0,7],[7,3]]]]
[[7,2],[[7,[6,7]],[8,5]]]
[[[9,7],[[6,6],9]],8]
[[4,2],[[[1,0],[9,1]],[[0,7],[8,0]]]]
[[[[5,9],5],[8,9]],[[2,4],[[5,2],[8,3]]]]
[[[[4,5],[7,0]],[4,5]],[[7,[6,4]],[[1,7],[6,3]]]]
[[2,0],4]
[[2,[[5,1],[2,1]]],[[5,[7,2]],[[2,3],[7,0]]]]
[[4,[4,9]],[9,[6,8]]]
[[[[6,1],[1,5]],[0,[4,0]]],[[[7,0],2],4]]
[[[[3,3],[2,2]],[[2,4],2]],[[8,[1,1]],4]]
[[[[1,5],8],[[9,4],[7,7]]],[[[8,7],[7,2]],[0,[7,3]]]]
[9,[[7,[0,4]],4]]
[4,[0,8]]
[[[[2,6],1],[8,[8,4]]],[[8,2],[1,[8,4]]]]
[[7,[8,[8,8]]],[4,1]]
[[0,6],[[7,[5,9]],[[7,1],8]]]
[4,6]
[[[[3,2],[5,6]],[0,7]],[8,[7,[9,5]]]]
[[[3,7],[4,5]],6]
[[[0,[3,9]],[9,1]],6]
[[[[7,3],8],[6,7]],[[1,0],[1,7]]]
[[[5,[4,8]],2],[[[7,1],6],[[0,3],2]]]
[[1,0],[[1,2],[[2,0],1]]]
[[8,[[6,1],[7,1]]],0]
[[9,[2,0]],[[7,[6,2]],4]]
[[[9,[9,4]],[[4,8],3]],[[9,0],[[2,2],[0,6]]]]
[[[7,5],[[2,9],6]],[[2,4],[[1,1],[8,2]]]]
[[[1,[6,3]],[[2,2],[1,8]]],[[[7,3],[6,0]],[4,[7,6]]]]
[6,5]
[[3,[9,[4,4]]],[[6,9],[4,5]]]
[[[4,[1,8]],[[4,0],6]],[[[9,0],[8,3]],[[8,6],[3,2]]]]
[[[8,[1,2]],[[3,9],6]],[[3,0],1]]
[[1,[2,[4,0]]],6]
[0,[[[1,3],[9,1]],[[3,8],[9,4]]]]
[2,[2,[[2,7],[7,8]]]]
[[[3,0],[[4,6],2]],[9,2]]
[[[5,[2,2]],[[2,7],[9,9]]],[[3,[4,4]],[8,[9,8]]]]
[[[[7,5],[7,9]],[[8,5],6]],[[1,[8,4]],[8,2]]]
[[[6,4],[5,5]],[[[8,1],5],[[6,4],[6,9]]]]
[[[[8,9],0],[[4,6],7]],[[[3,9],[6,4]],[8,[7,4]]]]
[4,[[7,7],4]]
[[[[4,9],[1,2]],[8,[4,7]]],[[8,[4,8]],[0,[5,4]]]]
[1,[7,9]]
[[[5,[2,0]],[[4,3],[6,8]]],[9,9]]
[[[[3,9],9],[4,3]],[1,[3,[8,1]]]]
[[[[8,7],[6,1]],[3,9]],[5,[[8,0],4]]]
[[[[8,2],[4,6]],[6,[9,9]]],[1,[[7,7],4]]]
[[7,5],[[5,0],[0,3]]]
[[[6,0],[9,1]],[[[4,3],[5,0]],[[9,5],[0,0]]]]
[8,[[3,6],3]]
[[[[9,3],7],[1,3]],[[[6,4],[8,4]],[1,5]]]
[[[[3,8],2],[5,4]],[[[1,8],5],[2,[2,7]]]]
[[2,9],[6,[0,2]]]
[[2,[7,9]],[[4,1],[[9,2],[0,7]]]]
[[0,[6,4]],[[9,2],[0,[0,7]]]]
[[[[7,2],[8,6]],[6,2]],[[[1,6],[2,2]],1]]
[[1,6],[[[4,3],[8,2]],[3,[9,4]]]]
[[9,[7,3]],[[[7,0],4],[[1,7],[2,2]]]]
[[7,[5,[9,8]]],[[[7,5],[7,6]],[7,[9,8]]]]
[[[[6,1],[4,3]],4],[[[5,9],4],2]]
[[[[5,1],[2,5]],0],[[7,[5,7]],[[4,4],9]]]
[9,2]
[4,[[[6,6],5],7]]
[[8,[[7,3],[0,7]]],8]
[[[3,4],[[2,3],0]],[[[9,6],[1,1]],[4,[0,4]]]]
[[[[3,3],[2,3]],[2,5]],[[4,[2,7]],3]]
[[[8,[0,3]],2],[4,4]]
[[[3,5],[[2,1],[3,4]]],[[0,3],4]]
[[[[4,1],4],2],[[[3,7],2],[[8,1],3]]]
[[[[0,6],[7,3]],[5,[3,9]]],[7,[[4,1],8]]]
EOF

def search_for_explode(node, depth=1)
  # print node
  # puts
  node.each_with_index do |e, i|
    if e.is_a? Array
      if depth >= 4 && e.count == 2 && e.all? { |v| v.is_a? Integer }
        left = node[0...i]
        if left.empty?
          left = "["
        else
          left = node[0...i].to_s[0...-1] + ","
        end
        right = node[i+1..-1]
        if right.empty?
          right = "]"
        else
          right = ", " + node[i+1..-1].to_s[1..-1]
        end

        # puts "full node: " + node.to_s
        # puts "left: " + left
        # puts "center: " + e.to_s
        # puts "right: " + right

        return [e, left, right]
      end

      ret = search_for_explode(e, depth+1)
      if ret
        left = node[0...i]
        if left.empty?
          left = "["
        else
          left = node[0...i].to_s[0...-1] + ","
        end
        right = node[i+1..-1]
        if right.empty?
          right = "]"
        else
          right = ", " + node[i+1..-1].to_s[1..-1]
        end

        ret[1] = left + ret[1]
        ret[2] = ret[2] + right

        # puts "full node: " + node.to_s
        # puts "left: " +  ret[1]
        # puts "center: " + e.to_s
        # puts "right: " + ret[2]

        return ret
      end
    end
  end
  return nil
end

require 'json'

def explodes(input)
  # puts  "EXPLODES for: " + input.to_s
  ret = search_for_explode(input)
  done_times = 0
  while ret
    done_times += 1
    # puts  "EXPLODING: " + input.to_s
    nums, left, right  = ret

    left = left.reverse
    last_left = left[/\d+/]
    if last_left
      last_left = last_left.reverse.to_i
      last_left += nums[0]
      last_left = last_left.to_s.reverse
      left = left.sub(/\d+/, last_left)
    end
    left = left.reverse

    first_right = right[/\d+/]
    if first_right
      right = right.sub(/\d+/, (first_right.to_i + nums[1]).to_s)
    end

    input = JSON.parse((left + "0" + right).gsub(/\s+/, ""))
    # print input
    # puts
    ret = search_for_explode(input)
  end
  [input, done_times]
end

def split(input)
  temp_input = input.clone
  bignum = input.to_s[/\d{2,3}/]
  return [input, 0] unless bignum
  bignum = bignum.to_i
  bignum = [bignum/2, (bignum/2.0).ceil].to_s
  input = JSON.parse(input.to_s.sub(/\d{2,3}/, bignum))
  [input, 1]
end

def process(input)
  while true
    input, dt = explodes(input)
    input, dt2 = split(input)
    break if dt+dt2 == 0
  end
  input
end

def magnitude(node)
  sum = 0
  if node.is_a? Array
    while !node.all? { |v| v.is_a? Integer }
      node.each_with_index do |e, i|
        node[i] = magnitude(e)
      end
    end
    return 3*node[0] + 2*node[1]
  end
  return sum
end

input = input.split("\n").map{|e| JSON.parse(e)}
maxmag = 0
permutations = input.permutation(2)
iterations = 0

permutations.each do |perm|
  iterations += 1
  # if iterations % 500 == 0
    # puts iterations
    # puts maxmag
  # end

  item = perm.shift
  while true
    item = process([item, perm.shift])
    break if perm.empty?
  end
  mag = magnitude(item)
  if mag > maxmag
    maxmag = mag
  end
end

puts maxmag

require 'pry'; binding.pry
puts
